#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 [-m MODEL] [-b BRANCH] [-n NUM_COMMITS]"
    echo "  -m MODEL   Specify the Ollama model to use (default: gemma2)"
    echo "  -b BRANCH  Specify the Git branch to fetch commits from (default: current branch)"
    echo "  -n NUM_COMMITS  Specify the number of recent commits to fetch (default: 3)"
    exit 1
}

# Default values
OLLAMA_MODEL="gemma2"
BRANCH=$(git rev-parse --abbrev-ref HEAD)
NUM_COMMITS=3

# Parse command-line options
while getopts ":m:b:n:h" opt; do
    case ${opt} in
        m )
            OLLAMA_MODEL=$OPTARG
            ;;
        b )
            BRANCH=$OPTARG
            ;;
        n )
            # Validate that NUM_COMMITS is a positive integer
            if [[ "$OPTARG" =~ ^[1-9][0-9]*$ ]]; then
                NUM_COMMITS=$OPTARG
            else
                echo "Error: NUM_COMMITS must be a positive integer."
                usage
            fi
            ;;
        h )
            usage
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            usage
            ;;
        : )
            echo "Invalid Option: -$OPTARG requires an argument" 1>&2
            usage
            ;;
    esac
done
shift $((OPTIND -1))

# Check if the current directory is a Git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: This directory is not a Git repository."
    exit 1
fi

# Fetch the specified number of recent commits with diffs, limiting context lines
COMMIT_DATA=$(git log -n "$NUM_COMMITS" -p -U2 --pretty=format:"### Commit: %h - %s (%an, %ar)" "$BRANCH")

if [ -z "$COMMIT_DATA" ]; then
    echo "No commits found in branch '$BRANCH'."
    exit 0
fi

# Function to truncate diffs
truncate_diffs() {
    local input="$1"
    local max_chars="$2"
    local output=""
    local current_commit=""
    local diff=""
    local in_diff=0

    while IFS= read -r line; do
        if [[ "$line" =~ ^###\ Commit: ]]; then
            # If there's a previous commit, process it
            if [ -n "$current_commit" ]; then
                # Truncate the diff if necessary
                if [ ${#diff} -gt "$max_chars" ]; then
                    diff="${diff:0:$max_chars}..."
                fi
                # Append to output
                output+="$current_commit"$'\n'"$diff"$'\n\n'
            fi
            # Start a new commit
            current_commit="$line"
            diff=""
            in_diff=1
        elif [ "$in_diff" -eq 1 ]; then
            diff+="$line"$'\n'
        fi
    done <<< "$input"

    # Process the last commit
    if [ -n "$current_commit" ]; then
        if [ ${#diff} -gt "$max_chars" ]; then
            diff="${diff:0:$max_chars}..."
        fi
        output+="$current_commit"$'\n'"$diff"$'\n'
    fi

    echo "$output"
}

# Truncate diffs based on MAX_CHARS
TRUNCATED_COMMIT_DATA=$(truncate_diffs "$COMMIT_DATA" 500)


echo "The $NUM_COMMITS most recent commits in branch '$BRANCH' with diffs are:"
echo "$TRUNCATED_COMMIT_DATA"
echo ""


ollama run "$OLLAMA_MODEL" "You are a software engineer's assistant." "I was working in this repo, but I forgot what I was doing. Can you remind me what I was working on last? Give me a brief, high-level summary of the work, along with 1-2 bullet points about the commits. Don't offer to follow up.\n\n$TRUNCATED_COMMIT_DATA"
